// Synopsys, Inc.
// User: xt
// Date: Tue Jun 21 22:42:41 2022

// ==================================================================================================
// This config file prototype is produced from the last run using the complete list of extracted fsms.
// Please note that by providing your own description of the module you are enforcing what will be
// extracted for that module.
// Copy this file to your source directory and edit it as described below,
// then pass the file to VCS using the -cm_fsmcfg command line option.
// FSMs will be extracted normally for any module not mentioned in this file
// ==================================================================================================
// 1. For every module that you want to specify yourself, use:
//      MODULE==name
//    -----------------------------------------------------
//    The following options are defining the behavior on the module level.
//    -----------------------------------------------------
//    1.1  You can control what fsms should be used within this module:
//            FSMS=AUTO
//            this means that you want VCS to automatically extract all
//            detectable FSMs from this module.
//            -----------------------------------------------------
//            FSMS=EXCLUDE
//            this means that you want all fsms except the ones from the list that follows
//            if the list is empty, all fsms will be extracted for this module
//            -----------------------------------------------------
//            FSMS=RESTRICT
//            this means that you want only the fsms from the list that follows
//            if the list is empty, no fsms will be extracted for this module
//            -----------------------------------------------------
//         If none of these options are specified, the program will assume FSMS=RESTRICT
//         -----------------------------------------------------
//     1.2 You can specify that the state with the minimal value should be used as a
//         start state for all sequences in every fsm in the module.
//            FSMS=START_STATE_DFLT
//         For any particular fsm you can overwrite this behavior inside its description.
//    -----------------------------------------------------
// 2. Each fsm description in the list of fsms should be specified as follows:
//      2.1 provide the current state variable declaration:
//          CURRENT= name of the current state variable
//      -----------------------------------------------------
//      2.2 if next state variable is different from the current state provide:
//          NEXT= next state variable
//          if you don't use NEXT=, the program will assume that CURRENT and NEXT are the same
//      -----------------------------------------------------
//      2.3 if you want to provide the restrictive the list of states, provide:
//          STATES= s0,s1 etc. where s0 is either a name or a value of the state
//          if you don't use STATES=, the program will assume that you want to use all states
//      -----------------------------------------------------
//      2.4 if you want to ignore some states, specify them in the following list:
//          STATES_X= s0,s1, etc.
//      -----------------------------------------------------
//      2.5 if you want to mark, that some states should never be reached, specify them as a list:
//          STATES_NEVER= s0,s1, etc.
//      -----------------------------------------------------
//      2.6 similar to the STATES, if you want to provide the restrictive the list of transitions, specify:
//          TRANSITIONS= s0->s1,s1->s2, etc.
//      -----------------------------------------------------
//      2.7 similar to the STATES_X, if you want to ignore some transitions, specify them in the following list:
//          TRANSITIONS_X= s0->s1,s1->s2, etc.
//      -----------------------------------------------------
//      2.8 similar to the STATES_NEVER,if you want to mark, that some transitions should never occur,
//          specify them as a list:
//          TRANSITIONS_NEVER= s0->s1,s1->s2,     etc.
//      -----------------------------------------------------
//      2.9 if you want to specify the start state use:
//          START_STATE= s0
//      -----------------------------------------------------
//      Please note:
//          - that a state in every list can be specified either by name or by value.
//          - in specifying the transitions you can use * in order to refer to 'any' state.
// ==================================================================================================
// Uncomment and modify the following 2 line to override default FSM sequence limits for all FSMs in the design.
//SEQ_NUMBER_MAX=10000
//SEQ_LENGTH_MAX=32

MODULE=DW_axi_gs_sm
CURRENT=state
NEXT=state
STATES=[SM_IDLE],[SM_LOW_PWR],[SM_RD],[SM_RD_MWAIT],[SM_TO_LOW_PWR],[SM_WR],[SM_WR_MWAIT]
TRANSITIONS=[SM_IDLE]->[SM_RD],
[SM_IDLE]->[SM_TO_LOW_PWR],
[SM_IDLE]->[SM_WR],
[SM_LOW_PWR]->[SM_IDLE],
[SM_RD]->[SM_IDLE],
[SM_RD]->[SM_RD_MWAIT],
[SM_RD]->[SM_TO_LOW_PWR],
[SM_RD]->[SM_WR],
[SM_RD_MWAIT]->[SM_IDLE],
[SM_RD_MWAIT]->[SM_RD],
[SM_TO_LOW_PWR]->[SM_IDLE],
[SM_TO_LOW_PWR]->[SM_LOW_PWR],
[SM_WR]->[SM_IDLE],
[SM_WR]->[SM_RD],
[SM_WR]->[SM_TO_LOW_PWR],
[SM_WR]->[SM_WR_MWAIT],
[SM_WR_MWAIT]->[SM_IDLE],
[SM_WR_MWAIT]->[SM_WR]
MODULE=sxdla_cmd_decode
CURRENT=state
NEXT=next_state
STATES=ACTIVE,BADDR0,BADDR1,CMD,CMDDONE,CONFIG,CVSIZE,ERROR,IDLE,QUANT,SBSIZE,SCSIZE,WBSIZE,WEIGHT,WEIGHT2,WORKDONE,WORKGO,WORKING
TRANSITIONS=ACTIVE->ERROR,
ACTIVE->IDLE,
ACTIVE->QUANT,
ACTIVE->WEIGHT,
ACTIVE->WORKGO,
BADDR0->ACTIVE,
BADDR0->BADDR1,
BADDR0->ERROR,
BADDR0->IDLE,
BADDR0->QUANT,
BADDR0->WEIGHT,
BADDR0->WORKGO,
BADDR1->ACTIVE,
BADDR1->ERROR,
BADDR1->IDLE,
BADDR1->QUANT,
BADDR1->WEIGHT,
BADDR1->WORKGO,
CMD->CONFIG,
CMD->IDLE,
CMDDONE->IDLE,
CONFIG->ACTIVE,
CONFIG->BADDR0,
CONFIG->BADDR1,
CONFIG->CVSIZE,
CONFIG->ERROR,
CONFIG->IDLE,
CONFIG->QUANT,
CONFIG->SBSIZE,
CONFIG->SCSIZE,
CONFIG->WBSIZE,
CONFIG->WEIGHT,
CONFIG->WORKGO,
CVSIZE->ACTIVE,
CVSIZE->BADDR0,
CVSIZE->BADDR1,
CVSIZE->ERROR,
CVSIZE->IDLE,
CVSIZE->QUANT,
CVSIZE->SBSIZE,
CVSIZE->SCSIZE,
CVSIZE->WBSIZE,
CVSIZE->WEIGHT,
CVSIZE->WORKGO,
ERROR->CMDDONE,
ERROR->IDLE,
IDLE->CMD,
QUANT->ERROR,
QUANT->IDLE,
QUANT->WEIGHT,
QUANT->WORKGO,
SBSIZE->ACTIVE,
SBSIZE->BADDR0,
SBSIZE->BADDR1,
SBSIZE->ERROR,
SBSIZE->IDLE,
SBSIZE->QUANT,
SBSIZE->SCSIZE,
SBSIZE->WBSIZE,
SBSIZE->WEIGHT,
SBSIZE->WORKGO,
SCSIZE->ACTIVE,
SCSIZE->BADDR0,
SCSIZE->BADDR1,
SCSIZE->ERROR,
SCSIZE->IDLE,
SCSIZE->QUANT,
SCSIZE->WBSIZE,
SCSIZE->WEIGHT,
SCSIZE->WORKGO,
WBSIZE->ACTIVE,
WBSIZE->BADDR0,
WBSIZE->BADDR1,
WBSIZE->ERROR,
WBSIZE->IDLE,
WBSIZE->QUANT,
WBSIZE->WEIGHT,
WBSIZE->WORKGO,
WEIGHT->ERROR,
WEIGHT->IDLE,
WEIGHT->WEIGHT2,
WEIGHT2->ERROR,
WEIGHT2->IDLE,
WEIGHT2->WORKGO,
WORKDONE->CMD,
WORKDONE->CMDDONE,
WORKDONE->IDLE,
WORKDONE->WEIGHT,
WORKGO->IDLE,
WORKGO->WORKING,
WORKING->IDLE,
WORKING->WORKDONE
MODULE=sxdla_fifo
CURRENT=cur_state
NEXT=next_state
STATES=FRST,HVTW,IDLE,ONLO
TRANSITIONS=FRST->HVTW,
FRST->IDLE,
FRST->ONLO,
HVTW->IDLE,
HVTW->ONLO,
IDLE->FRST,
ONLO->FRST,
ONLO->HVTW,
ONLO->IDLE
MODULE=sxdla_fifo
CURRENT=cur_state
NEXT=next_state
STATES=FRST,HVTW,IDLE,ONLO
TRANSITIONS=FRST->HVTW,
FRST->IDLE,
FRST->ONLO,
HVTW->IDLE,
HVTW->ONLO,
IDLE->FRST,
ONLO->FRST,
ONLO->HVTW,
ONLO->IDLE
MODULE=sxdla_fifo
CURRENT=cur_state
NEXT=next_state
STATES=FRST,HVTW,IDLE,ONLO
TRANSITIONS=FRST->HVTW,
FRST->IDLE,
FRST->ONLO,
HVTW->IDLE,
HVTW->ONLO,
IDLE->FRST,
ONLO->FRST,
ONLO->HVTW,
ONLO->IDLE
MODULE=sxdla_cmd_fetch
CURRENT=state
NEXT=next_state
STATES=CMD,DATA,IDLE,WAIT
TRANSITIONS=CMD->DATA,
CMD->IDLE,
DATA->IDLE,
DATA->WAIT,
IDLE->CMD,
WAIT->CMD,
WAIT->IDLE
MODULE=sxdla_writeback_ctrl
CURRENT=state
NEXT=next_state
STATES=ADDR,CMD0,CMD1,DATA,IDLE
TRANSITIONS=ADDR->DATA,
ADDR->IDLE,
CMD0->DATA,
CMD0->IDLE,
CMD1->ADDR,
CMD1->IDLE,
DATA->CMD0,
DATA->CMD1,
DATA->IDLE,
IDLE->ADDR
MODULE=gpu_bus_matrix_fifo_s
CURRENT=cur_state
NEXT=next_state
STATES=FRST,HVTW,IDLE,ONLO
TRANSITIONS=FRST->HVTW,
FRST->IDLE,
FRST->ONLO,
HVTW->IDLE,
HVTW->ONLO,
IDLE->FRST,
ONLO->FRST,
ONLO->HVTW,
ONLO->IDLE
MODULE=sxdla_data_fetch
CURRENT=state
NEXT=next_state
STATES=ADDR,CMD,IDLE,WAIT
TRANSITIONS=ADDR->CMD,
ADDR->IDLE,
CMD->IDLE,
CMD->WAIT,
IDLE->ADDR,
WAIT->ADDR,
WAIT->CMD,
WAIT->IDLE
MODULE=sxdla_bus_matrix_fifo
CURRENT=cur_state
NEXT=next_state
STATES=FRST,HVTW,IDLE,ONLO
TRANSITIONS=FRST->HVTW,
FRST->IDLE,
FRST->ONLO,
HVTW->IDLE,
HVTW->ONLO,
IDLE->FRST,
ONLO->FRST,
ONLO->HVTW,
ONLO->IDLE
